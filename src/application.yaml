openapi: 3.0.1
info:
  title: Product API
  description: API for managing products
  version: "1.0"
servers:
  - url: http://localhost:8090
    description: Generated server url
tags:
  - name: Product API
    description: Operations related to products
paths:
  /api/products:
    get:
      tags:
        - Product API
      summary: Get all products
      description: Retrieve a list of all available products.
      operationId: getAllProducts
      responses:
        "200":
          description: Successfully retrieved list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseDTO"
    post:
      tags:
        - Product API
      summary: Create a new product
      description: Add a new product to the store.
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
        required: true
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseDTO"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
  /api/products/{id}:
    get:
      tags:
        - Product API
      summary: Get a product by ID
      description: Retrieve a single product by its unique ID.
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseDTO"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
    put:
      tags:
        - Product API
      summary: Update an existing product
      description: Update an existing product by its ID.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
        required: true
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseDTO"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
    delete:
      tags:
        - Product API
      summary: Delete a product
      description: Delete a product by its ID.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerResponse"
components:
  schemas:
    ProductResponseDTO:
      required:
        - name
        - price
      type: object
      properties:
        name:
          type: string
          description: Name of the product.
          example: Laptop
        price:
          type: number
          description: Price of the product.
          format: double
          example: 1200.0
      description: Product response object without ID
    CreateProductRequest:
      required:
        - name
        - price
      type: object
      properties:
        name:
          type: string
          description: Name of the product
          example: Smartphone
        price:
          type: number
          description: Price of the product
          format: double
          example: 999.99
      description: Request object for creating a new product
    ServerResponse:
      type: object